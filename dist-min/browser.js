import{typestripped as t}from"./typestripped.js";let e={};let r=location.href;function o(n){if(n.slice(-3)===".js")return n;const s=new URL(n,r).toString();let c=e[s];if(!c){const n=new XMLHttpRequest;n.open("GET",s,false);n.send(null);if(n.status!==200){throw new Error(`HTTP error! status: ${n.status} for ${s}`)}const i=n.responseText;let a=r;r=s;const l=t(i,{recover:true,transformImport:o})+"\n//# sourceURL="+s;r=a;const p=new Blob([l],{type:"application/javascript"});c=URL.createObjectURL(p);e[s]=c}console.log(`typestripped browser transformed import`,s,c);return c}export async function transpile(e){let n;let s=e.getAttribute("src");if(s){s=new URL(s,r).toString();const t=await fetch(s);if(!t.ok){throw new Error(`Failed to fetch ${s}: ${t.status} ${t.statusText}`)}n=await t.text()}else{n=e.textContent||""}const c=document.createElement("script");let i=t(n,{recover:true,transformImport:o});if(s)i+="\n//# sourceURL="+s;c.textContent=i;c.setAttribute("type","module");e.parentNode.replaceChild(c,e)}export async function transpileAll(){const t=document.querySelectorAll('script[type="text/typescript"]');for(const e of t){try{await transpile(e)}catch(t){console.error(t)}}}document.addEventListener("DOMContentLoaded",transpileAll);