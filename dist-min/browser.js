import{typestripped as t}from"./typestripped.js";let e={};let r=location.href;function transformImport(o){if(o.slice(-3)===".js")return o;const n=new URL(o,r).toString();let s=e[n];if(!s){const o=new XMLHttpRequest;o.open("GET",n,false);o.send(null);if(o.status!==200){throw new Error(`HTTP error! status: ${o.status} for ${n}`)}const c=o.responseText;let a=r;r=n;const i=t(c,{recover:true,transformImport:transformImport})+"\n//# sourceURL="+n;r=a;const l=new Blob([i],{type:"application/javascript"});s=URL.createObjectURL(l);e[n]=s}console.log(`typestripped browser transformed import`,n,s);return s}export async function transpile(e){let o;let n=e.getAttribute("src");if(n){n=new URL(n,r).toString();const t=await fetch(n);if(!t.ok){throw new Error(`Failed to fetch ${n}: ${t.status} ${t.statusText}`)}o=await t.text()}else{o=e.textContent||""}const s=document.createElement("script");let c=t(o,{recover:true,transformImport:transformImport});if(n)c+="\n//# sourceURL="+n;s.textContent=c;s.setAttribute("type","module");e.parentNode.replaceChild(s,e)}export async function transpileAll(){const t=document.querySelectorAll('script[type="text/typescript"]');for(const e of t){try{await transpile(e)}catch(t){console.error(t)}}}document.addEventListener("DOMContentLoaded",transpileAll);